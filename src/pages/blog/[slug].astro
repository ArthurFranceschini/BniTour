---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
  entry: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const heroImage = entry.data.heroImage;
---

<Layout entry={entry}>
  <article class="min-h-screen">
    <nav class="header-padding pt-24 pb-8" aria-label="Breadcrumb">
      <div class="max-w-4xl mx-auto">
        <ol class="flex items-center space-x-2 text-sm opacity-0 breadcrumb-reveal">
          <li>
            <a href="/" class="text-gray-500 hover:text-blue transition-colors duration-300 flex items-center gap-2">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
              </svg>
              Home
            </a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li>
            <a href="/blog" class="text-gray-500 hover:text-blue transition-colors duration-300">
              Blog
            </a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li class="text-gray-700 font-medium truncate max-w-xs">
            {entry.data.title || "Título do Post"}
          </li>
        </ol>
      </div>
    </nav>

    {heroImage && (
      <div class="mb-12">
        <div class="max-w-4xl mx-auto px-4 md:px-6 lg:px-4 opacity-0 hero-image-reveal">
          <div class="rounded-xl overflow-hidden shadow-2xl">
            <img 
              src={heroImage} 
              alt={entry.data.title || "Imagem do Post"} 
              class="w-full h-[300px] md:h-[400px] lg:h-[500px] object-cover"
            />
          </div>
        </div>
      </div>
    )}

    <section class="blog-padding pt-0">
      <div class="max-w-4xl mx-auto">
        <h1 class="title-reveal mb-6">
          {entry.data.title || "Título do Post"}
        </h1>

        {entry.data.pubDate && (
          <div class="subtitle-reveal flex items-center gap-4 text-gray-600 mb-8 pb-6 border-b border-gray-200">
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <time datetime={entry.data.pubDate.toISOString()}>
                {new Date(entry.data.pubDate).toLocaleDateString('pt-BR', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </time>
            </div>
            {entry.data.author && (
              <>
                <span class="text-gray-400">•</span>
                <div class="flex items-center gap-2">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span>{entry.data.author}</span>
                </div>
              </>
            )}
          </div>
        )}

        {entry.data.description && (
          <div class="text-reveal mb-12">
            <p class="text-xl text-gray-600 leading-relaxed font-normal">
              {entry.data.description}
            </p>
          </div>
        )}
        
        <div class="content-reveal blog-content">
          <Content />
        </div>

        <div class="mt-16 pt-8 border-t border-gray-200 cta-button">
          <a href="/blog" class="btn-nav group">
            <span class="button-content-initial-text">Voltar para o Blog</span>
            <div class="btn-cta-icon-wrapper bg-gray-100 group-hover:bg-gray-200 transition-colors">
              <svg class="w-4 h-4 button-content-initial-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
            </div>
          </a>
        </div>
      </div>
    </section>
  </article>
</Layout>


<style>
  .breadcrumb-reveal {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .hero-image-reveal {
    animation: fadeInUp 0.8s ease-out 0.2s forwards;
  }

  .title-reveal {
    animation: fadeInUp 0.8s ease-out 0.3s forwards;
  }

  .subtitle-reveal {
    animation: fadeInUp 0.8s ease-out 0.4s forwards;
  }

  .content-reveal {
    animation: fadeInUp 0.8s ease-out 0.5s forwards;
  }

  .cta-button {
    animation: fadeInUp 0.8s ease-out 0.6s forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .btn-nav {
    opacity: 0;
    transform: translateY(10px);
    animation: fadeInUp 0.6s ease-out 0.7s forwards;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.querySelector('.btn-nav');
    if (button) {
      setTimeout(() => {
        button.classList.add('is-revealed');
      }, 700);
    }
  });
</script>