---
import { packages } from '../../data/packages.js';
import { mapLocations } from '../../data/mapLocations.js';
import { ChevronRight, MessageCircle, Clock, MapPin, Check, ArrowLeft, Star, Camera, Compass, Waves, Mountain, TreePine, Building, Church, ShoppingBag } from 'lucide-astro';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  return packages.map((pkg) => ({
    params: { slug: pkg.slug },
    props: { package: pkg },
  }));
}

const { package: pkg } = Astro.props;

type LocationType = 'attraction' | 'landmark' | 'adventure' | 'shopping' | 'port' | 'waterfall' | 'church' | 'park' | 'city' | 'entertainment';

interface Location {
  name: string;
  lat: number;
  lng: number;
  type: LocationType;
  description: string;
}

type LocationConfigKey = 'joias-naturais' | 'cataratas-argentina' | 'aventura-emocao' | 'compras-cultura' | 'city-tour-argentina' | 'cruzeiro-por-do-sol' | 'city-tour-paraguai' | 'city-tour-foz';

interface LocationConfig {
  sectionTitle: string;
  sectionSubtitle: string;
  bgGradient: string;
  cardStyle: string;
}

const locations: Location[] = (mapLocations as Record<string, Location[]>)[pkg.slug] || [];

const colorMap = {
  blue: {
    primary: '#3b82f6',
    gradientFrom: '#2563eb',
    gradientTo: '#60a5fa',
  },
  red: {
    primary: '#ef4444',
    gradientFrom: '#dc2626',
    gradientTo: '#f87171',
  },
  green: {
    primary: '#10b981',
    gradientFrom: '#059669',
    gradientTo: '#34d399',
  },
  default: {
    primary: '#3b82f6',
    gradientFrom: '#2563eb',
    gradientTo: '#60a5fa',
  }
} as const;

type ColorKey = keyof typeof colorMap;
const currentColors = colorMap[pkg.tagColor as ColorKey] || colorMap.default;

const getLocationIcon = (type: LocationType) => {
  const iconMap: Record<LocationType, any> = {
    attraction: Star,
    landmark: MapPin,
    adventure: Waves,
    shopping: ShoppingBag,
    port: Compass,
    waterfall: Mountain,
    church: Church,
    park: TreePine,
    city: Building,
    entertainment: Camera
  };
  return iconMap[type] || MapPin;
};

const locationConfigs: Record<LocationConfigKey, LocationConfig> = {
  'joias-naturais': {
    sectionTitle: 'Maravilhas Naturais',
    sectionSubtitle: 'Descubra a força da natureza em cada passo',
    bgGradient: 'from-emerald-50 to-green-50',
    cardStyle: 'nature'
  },
  'cataratas-argentina': {
    sectionTitle: 'Experiência Argentina',
    sectionSubtitle: 'Viva a paixão e cultura argentina',
    bgGradient: 'from-blue-50 to-sky-50',
    cardStyle: 'cultural'
  },
  'aventura-emocao': {
    sectionTitle: 'Adrenalina Pura',
    sectionSubtitle: 'Para os amantes de aventura e emoção',
    bgGradient: 'from-orange-50 to-amber-50',
    cardStyle: 'adventure'
  },
  'compras-cultura': {
    sectionTitle: 'Compras & Descobertas',
    sectionSubtitle: 'O melhor do comércio paraguaio',
    bgGradient: 'from-purple-50 to-pink-50',
    cardStyle: 'shopping'
  },
  'city-tour-argentina': {
    sectionTitle: 'Charme Argentino',
    sectionSubtitle: 'Explore a elegância de Puerto Iguazú',
    bgGradient: 'from-blue-50 to-indigo-50',
    cardStyle: 'cultural'
  },
  'cruzeiro-por-do-sol': {
    sectionTitle: 'Romance nas Águas',
    sectionSubtitle: 'Um pôr do sol inesquecível',
    bgGradient: 'from-rose-50 to-orange-50',
    cardStyle: 'romantic'
  },
  'city-tour-paraguai': {
    sectionTitle: 'Cultura Paraguaia',
    sectionSubtitle: 'Tradições e belezas naturais',
    bgGradient: 'from-red-50 to-rose-50',
    cardStyle: 'cultural'
  },
  'city-tour-foz': {
    sectionTitle: 'Orgulho Brasileiro',
    sectionSubtitle: 'O melhor de Foz do Iguaçu',
    bgGradient: 'from-green-50 to-emerald-50',
    cardStyle: 'urban'
  }
};

const getLocationConfig = (slug: string): LocationConfig => {
  return locationConfigs[slug as LocationConfigKey] || locationConfigs['joias-naturais'];
};

const config = getLocationConfig(pkg.slug);

const getLocationTypeText = (type: LocationType): string => {
  const typeMap: Record<LocationType, string> = {
    attraction: 'Atração',
    landmark: 'Marco',
    adventure: 'Aventura',
    shopping: 'Compras',
    port: 'Porto',
    waterfall: 'Cachoeira',
    church: 'Igreja',
    park: 'Parque',
    city: 'Centro',
    entertainment: 'Entretenimento'
  };
  return typeMap[type] || 'Atração';
};

const getMapCenter = () => {
  if (locations.length === 0) {
    return { lat: -25.5469, lng: -54.5882 };
  }
  
  const avgLat = locations.reduce((sum, point) => sum + point.lat, 0) / locations.length;
  const avgLng = locations.reduce((sum, point) => sum + point.lng, 0) / locations.length;
  
  return { lat: avgLat, lng: avgLng };
};

const mapCenter = getMapCenter();
---

<Layout title={`${pkg.title} - BNI Tour`}>
  
<section class="hero-section section-reveal relative h-[50vh] md:h-[55vh] lg:h-[60vh] overflow-hidden bg-gray-900">
  <div class="absolute inset-0 w-full h-full flex items-end justify-center">
    <img 
      src={pkg.image.src}
      alt={pkg.title}
      class="w-full h-auto object-bottom"
      style="object-position: center bottom;"
    />
  </div>
  <div class="absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-black/60"></div>
  
  <div class="relative z-10 h-full flex flex-col justify-end section-padding max-w-6xl mx-auto pb-8 md:pb-12">
    <a href="/#Packages" class="back-button mb-6 inline-flex items-center bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full text-white hover:bg-white/20 transition-all w-fit border border-white/20">
      <ArrowLeft size={18} class="mr-2" />
      <span class="font-medium">Voltar aos Pacotes</span>
    </a>
    
    <div class={`tag-reveal inline-block px-6 py-3 rounded-full mb-6 w-fit card-tag card-tag-${pkg.tagColor} shadow-lg backdrop-blur-sm border border-white/20`}>
      <MapPin size={18} class="inline mr-2" />
      <span class="font-semibold">{pkg.location}</span>
    </div>
    
    <h1 class="title-reveal text-white mb-4 text-3xl md:text-4xl lg:text-5xl font-bold leading-tight">
      {pkg.title}
    </h1>
    
    <p class="subtitle-reveal text-white text-base md:text-lg lg:text-xl max-w-2xl leading-relaxed">
      {pkg.description}
    </p>
  </div>
</section>

  {locations.length > 0 && (
    <section class={`locations-section section-reveal bg-gradient-to-br ${config.bgGradient} section-padding`}>
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
          <h2 class="content-title text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            {config.sectionTitle}
          </h2>
          <p class="content-subtitle text-lg text-gray-600 max-w-2xl mx-auto">
            {config.sectionSubtitle}
          </p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div class="space-y-6">
            {locations.map((location: Location, index: number) => {
              const IconComponent = getLocationIcon(location.type);
              return (
                <div 
                  class={`location-card location-card-${config.cardStyle} bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer`}
                  style={`animation-delay: ${index * 150}ms`}
                  data-lat={location.lat}
                  data-lng={location.lng}
                  data-name={location.name}
                  data-description={location.description}
                  data-index={index}
                >
                  <div class="flex items-start mb-4">
                    <div 
                      class="location-icon flex-shrink-0 w-12 h-12 rounded-xl flex items-center justify-center mr-4"
                      style={`background: linear-gradient(135deg, ${currentColors.gradientFrom}, ${currentColors.gradientTo});`}
                    >
                      <IconComponent size={24} class="text-white" />
                    </div>
                    <div class="flex-1">
                      <h3 class="font-bold text-gray-900 text-lg mb-1 leading-tight">
                        {location.name}
                      </h3>
                      <span class="location-type text-sm px-2 py-1 rounded-full" style={`background-color: ${currentColors.primary}20; color: ${currentColors.primary};`}>
                        {getLocationTypeText(location.type)}
                      </span>
                    </div>
                  </div>
                  <p class="text-gray-600 text-sm leading-relaxed">
                    {location.description}
                  </p>
                </div>
              );
            })}
          </div>

          <div class="map-container bg-white rounded-2xl shadow-xl overflow-hidden">
            <div class="p-6 border-b border-gray-100">
              <h3 class="text-xl font-bold text-gray-900 mb-2">
                Localização dos Pontos
              </h3>
              <p class="text-gray-600 text-sm">
                Clique nos cards ao lado para navegar no mapa
              </p>
            </div>
            <div id="leaflet-map" class="w-full h-96"></div>
          </div>
        </div>
      </div>
    </section>
  )}

  <section class="content-section section-reveal bg-white section-padding">
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        
        <div class="lg:col-span-2">
          <div class="content-block mb-12">
            <h2 class="content-title text-gray-900 mb-6">
              Sobre o Passeio
            </h2>
            <p class="content-text text-gray-700 leading-relaxed">
              {pkg.fullDescription}
            </p>
          </div>

          <div class="content-block">
            <h3 class="content-title text-gray-900 mb-6">
              O que está incluído
            </h3>
            <ul class="space-y-4">
              {pkg.included.map((item: string, index: number) => (
                <li class="included-item flex items-start" style={`animation-delay: ${index * 100}ms`}>
                  <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mr-3 mt-1" style={`background-color: ${currentColors.primary};`}>
                    <Check size={16} class="text-white" />
                  </div>
                  <span class="text-gray-700">{item}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        <div class="lg:col-span-1">
          <div class="sidebar-card sticky top-8 rounded-2xl p-8 shadow-2xl" style={`background-image: linear-gradient(to bottom right, ${currentColors.gradientFrom}, ${currentColors.gradientTo});`}>
            <div class="info-item mb-6">
              <div class="flex items-center text-white/80 mb-2">
                <Clock size={20} class="mr-2" />
                <span class="text-sm font-semibold uppercase tracking-wide">Duração</span>
              </div>
              <p class="text-white text-xl font-bold">{pkg.duration}</p>
            </div>

            <div class="info-item mb-6">
              <div class="flex items-center text-white/80 mb-2">
                <MapPin size={20} class="mr-2" />
                <span class="text-sm font-semibold uppercase tracking-wide">Localização</span>
              </div>
              <p class="text-white text-xl font-bold">{pkg.location}</p>
            </div>

            <div class="price-box bg-white/10 rounded-xl p-6 mb-6 backdrop-blur-sm">
              <p class="text-white/80 text-sm mb-2">A partir de</p>
              <p class="text-white text-3xl font-bold">{pkg.price}</p>
            </div>

            <a href="/" class="btn-cta w-full flex items-center justify-between text-white hover:shadow-lg transition-all px-6 py-3 rounded-xl font-semibold bg-gradient-to-r from-[#25D366] to-[#128C7E] hover:from-[#20B954] hover:to-[#0F6B5C]">
              <span>Reservar Agora</span>
              <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors">
                <MessageCircle size={16} class="text-white" />
              </div>
            </a>

            <p class="text-white/70 text-sm text-center mt-4">
              Entre em contato para mais informações
            </p>
          </div>
        </div>

      </div>
    </div>
  </section>

</Layout>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<style>
  .card-tag-red { 
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
    box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
  }
  .card-tag-green { 
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
  }
  .card-tag-blue { 
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
  }

.hero-section img {
  transition: transform 0.3s ease;
}

.hero-section:hover img {
  transform: scale(1.02);
}

  .location-card {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .location-card {
    opacity: 1;
    transform: translateY(0);
  }

 .location-card:hover {
  border-color: rgba(59, 130, 246, 0.3);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
  background-color: rgba(59, 130, 246, 0.02);
}

  .location-card-nature {
    border-left: 4px solid #10b981;
  }

  .location-card-cultural {
    border-left: 4px solid #3b82f6;
  }

  .location-card-adventure {
    border-left: 4px solid #f59e0b;
  }

  .location-card-shopping {
    border-left: 4px solid #8b5cf6;
  }

  .location-card-romantic {
    border-left: 4px solid #ec4899;
  }

  .location-card-urban {
    border-left: 4px solid #64748b;
  }

  .location-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .location-icon {
    opacity: 1;
    transform: scale(1);
  }

  .location-type {
    opacity: 0;
    transform: translateX(-10px);
    transition: opacity 0.6s ease 0.3s, transform 0.6s ease 0.3s;
  }

  .section-reveal-active .location-type {
    opacity: 1;
    transform: translateX(0);
  }

  .map-container {
    opacity: 0;
    transform: translateX(30px);
    transition: opacity 0.8s ease 0.4s, transform 0.8s ease 0.4s;
  }

  .section-reveal-active .map-container {
    opacity: 1;
    transform: translateX(0);
  }

  .leaflet-popup-content-wrapper {
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.15);
  }

  .leaflet-popup-content {
    margin: 16px;
    font-family: inherit;
  }

  .back-button {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease 0.3s, transform 0.6s ease 0.3s;
  }

  .section-reveal-active .back-button {
    opacity: 1;
    transform: translateX(0);
  }

  .back-button:hover {
    transform: translateX(-2px);
  }

  .tag-reveal {
    opacity: 0;
    transform: scale(0.9) translateY(10px);
    transition: opacity 0.6s ease 0.4s, transform 0.6s ease 0.4s;
  }

  .section-reveal-active .tag-reveal {
    opacity: 1;
    transform: scale(1) translateY(0);
  }

  .content-block {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .content-block {
    opacity: 1;
    transform: translateY(0);
  }

  .content-block:nth-child(1) {
    transition-delay: 0.2s;
  }

  .content-block:nth-child(2) {
    transition-delay: 0.4s;
  }

  .content-title {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .content-title {
    opacity: 1;
    transform: translateX(0);
  }

  .content-subtitle {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .content-subtitle {
    opacity: 1;
    transform: translateY(0);
  }

  .content-text {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .content-text {
    opacity: 1;
    transform: translateY(0);
  }

  .included-item {
    opacity: 0;
    transform: translateX(-20px);
    animation: slideInLeft 0.6s ease forwards;
    animation-play-state: paused;
  }

  .section-reveal-active .included-item {
    animation-play-state: running;
  }

  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .sidebar-card {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    transition: opacity 0.8s ease 0.4s, transform 0.8s ease 0.4s;
  }

  .section-reveal-active .sidebar-card {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .info-item {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .info-item {
    opacity: 1;
    transform: translateX(0);
  }

  .info-item:nth-child(1) {
    transition-delay: 0.6s;
  }

  .info-item:nth-child(2) {
    transition-delay: 0.7s;
  }

  .price-box {
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 0.6s ease 0.8s, transform 0.6s ease 0.8s;
  }

  .section-reveal-active .price-box {
    opacity: 1;
    transform: scale(1);
  }

  .sidebar-card .btn-cta {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 1s, transform 0.6s ease 1s;
  }

  .section-reveal-active .sidebar-card .btn-cta {
    opacity: 1;
    transform: translateY(0);
  }

  .btn-cta:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255,255,255,0.2);
  }
</style>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script is:inline define:vars={{ locations, mapCenter, currentColors }}>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof L === 'undefined') {
      console.error('Leaflet não carregou');
      return;
    }

    const map = L.map('leaflet-map').setView([mapCenter.lat, mapCenter.lng], 12);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors',
      maxZoom: 19
    }).addTo(map);

    const markers = [];

    const createCustomIcon = (color) => {
      return L.divIcon({
        className: 'custom-marker',
        html: `<div style="
          width: 20px;
          height: 20px;
          background-color: ${color};
          border: 3px solid white;
          border-radius: 50%;
          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        "></div>`,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      });
    };

    locations.forEach((location, index) => {
      const marker = L.marker([location.lat, location.lng], {
        icon: createCustomIcon(currentColors.primary)
      }).addTo(map);

      marker.bindPopup(`
        <div style="padding: 8px; max-width: 200px;">
          <h3 style="margin: 0 0 8px 0; color: ${currentColors.primary}; font-size: 16px; font-weight: bold;">
            ${location.name}
          </h3>
          <p style="margin: 0; color: #666; font-size: 14px; line-height: 1.4;">
            ${location.description}
          </p>
        </div>
      `);

      markers.push(marker);
    });

    const locationCards = document.querySelectorAll('.location-card');
    locationCards.forEach((card, index) => {
      card.addEventListener('click', () => {
        const lat = parseFloat(card.dataset.lat);
        const lng = parseFloat(card.dataset.lng);
        
        map.setView([lat, lng], 15);
        
        if (markers[index]) {
          markers[index].openPopup();
        }
        
        card.style.transform = 'scale(1.02)';
        card.style.boxShadow = '0 10px 25px rgba(0,0,0,0.15)';
        
        setTimeout(() => {
          card.style.transform = '';
          card.style.boxShadow = '';
        }, 200);
      });
    });

    if (locations.length > 1) {
      const group = new L.featureGroup(markers);
      map.fitBounds(group.getBounds().pad(0.1));
    }
  });
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    var observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    var sectionObserver = new IntersectionObserver(function(entries) {
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        if (entry.isIntersecting) {
          entry.target.classList.add('section-reveal-active');
          sectionObserver.unobserve(entry.target);
        }
      }
    }, observerOptions);

    var revealSections = document.querySelectorAll('.section-reveal');
    for (var i = 0; i < revealSections.length; i++) {
      sectionObserver.observe(revealSections[i]);
    }
  });
</script>