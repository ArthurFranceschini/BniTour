---
import { packages } from '../../data/packages.js';
import { packagesContent } from '../../data/packages-i18n.ts';
import { t } from '../../data/trannslations.ts';
import { mapLocations } from '../../data/mapLocations.js';
import { mapLocationsTranslations } from '../../data/mapLocations-i18n.ts'; 
import { ChevronRight, MessageCircle, Clock, MapPin, Check, ArrowLeft, Star, Camera, Compass, Waves, Mountain, TreePine, Building, Church, ShoppingBag } from 'lucide-astro';
import Layout from '../../layouts/Layout.astro';
interface StaticPath {
  params: { slug: string };
  props: { package: any; lang: 'pt' | 'en' | 'es' };
}

export async function getStaticPaths(): Promise<StaticPath[]> {
  // Gerar rotas para todos os idiomas
  const paths: StaticPath[] = [];
  
  packages.forEach((pkg) => {
    // Rota padrão (português)
    paths.push({
      params: { slug: pkg.slug },
      props: { package: pkg, lang: 'pt' },
    });
    
    // Rotas com idiomas específicos
    (['en', 'es'] as const).forEach(lang => {
      paths.push({
        params: { slug: pkg.slug },
        props: { package: pkg, lang: lang },
      });
    });
  });
  
  return paths;
}

const { package: pkg } = Astro.props;

// Detectar idioma da URL no servidor
let serverLang: 'pt' | 'en' | 'es' = 'pt';
try {
  const url = new URL(Astro.request.url);
  const langParam = url.searchParams.get('lang');
  serverLang = (langParam === 'en' || langParam === 'es' ? langParam : 'pt') as 'pt' | 'en' | 'es';
} catch (error) {
  serverLang = 'pt';
}

// Usar o idioma detectado
const lang = serverLang;

// Pegar conteúdo traduzido
const content = packagesContent[pkg.slug as keyof typeof packagesContent]?.[lang] || packagesContent[pkg.slug as keyof typeof packagesContent].pt;

type LocationType = 'attraction' | 'landmark' | 'adventure' | 'shopping' | 'port' | 'waterfall' | 'church' | 'park' | 'city' | 'entertainment';

interface Location {
  name: string;
  lat: number;
  lng: number;
  type: LocationType;
  description: string;
}

type LocationConfigKey = 'cataratas-brasil-+-parque-das-aves' | 'cataratas-argentina-+-city-tour-argentina' | 'macuco-safari' | 'compras-paraguai' | 'city-tour-argentina' | 'kattamaramII' | 'city-tour-paraguai' | 'city-tour-foz' | 'cassino-argentina';

interface LocationConfig {
  sectionTitle: string;
  sectionSubtitle: string;
  bgGradient: string;
  cardStyle: string;
}

const locations: Location[] = (mapLocations as Record<string, Location[]>)[pkg.slug] || [];

const colorMap = {
  blue: {
    primary: '#3b82f6',
    gradientFrom: '#2563eb',
    gradientTo: '#60a5fa',
  },
  red: {
    primary: '#ef4444',
    gradientFrom: '#dc2626',
    gradientTo: '#f87171',
  },
  green: {
    primary: '#10b981',
    gradientFrom: '#059669',
    gradientTo: '#34d399',
  },
  default: {
    primary: '#3b82f6',
    gradientFrom: '#2563eb',
    gradientTo: '#60a5fa',
  }
} as const;

type ColorKey = keyof typeof colorMap;
const currentColors = colorMap[pkg.tagColor as ColorKey] || colorMap.default;

const getLocationIcon = (type: LocationType) => {
  const iconMap: Record<LocationType, any> = {
    attraction: Star,
    landmark: MapPin,
    adventure: Waves,
    shopping: ShoppingBag,
    port: Compass,
    waterfall: Mountain,
    church: Church,
    park: TreePine,
    city: Building,
    entertainment: Camera
  };
  return iconMap[type] || MapPin;
};

const locationConfigs: Record<LocationConfigKey, LocationConfig> = {
  'cataratas-brasil-+-parque-das-aves': {
    sectionTitle: 'Maravilhas Naturais',
    sectionSubtitle: 'Descubra a força da natureza em cada passo',
    bgGradient: 'from-emerald-50 to-green-50',
    cardStyle: 'nature'
  },
  'cataratas-argentina-+-city-tour-argentina': {
    sectionTitle: 'Experiência Argentina',
    sectionSubtitle: 'Viva a paixão e cultura argentina',
    bgGradient: 'from-blue-50 to-sky-50',
    cardStyle: 'cultural'
  },
  'cassino-argentina': {
    sectionTitle: 'Cassino City Center',
    sectionSubtitle: 'Jogos, bar completo e prêmios na moeda de sua escolha.',
    bgGradient: 'from-blue-50 to-sky-50',
    cardStyle: 'cultural',
  },
  'macuco-safari': {
    sectionTitle: 'Adrenalina Pura',
    sectionSubtitle: 'Para os amantes de aventura e emoção',
    bgGradient: 'from-orange-50 to-amber-50',
    cardStyle: 'adventure'
  },
  'compras-paraguai': {
    sectionTitle: 'Compras & Descobertas',
    sectionSubtitle: 'O melhor do comércio paraguaio',
    bgGradient: 'from-purple-50 to-pink-50',
    cardStyle: 'shopping'
  },
  'city-tour-argentina': {
    sectionTitle: 'Passeio em Puerto Iguazú',
    sectionSubtitle: 'Conheça os principais pontos turísticos da cidade',
    bgGradient: 'from-blue-50 to-indigo-50',
    cardStyle: 'cultural'
  },
  'kattamaramII': {
    sectionTitle: 'Romance nas Águas',
    sectionSubtitle: 'Um pôr do sol inesquecível',
    bgGradient: 'from-rose-50 to-orange-50',
    cardStyle: 'romantic'
  },
  'city-tour-paraguai': {
    sectionTitle: 'Cultura Paraguaia',
    sectionSubtitle: 'Tradições e belezas naturais',
    bgGradient: 'from-red-50 to-rose-50',
    cardStyle: 'cultural'
  },
  'city-tour-foz': {
    sectionTitle: 'Orgulho Brasileiro',
    sectionSubtitle: 'O melhor de Foz do Iguaçu',
    bgGradient: 'from-green-50 to-emerald-50',
    cardStyle: 'urban'
  }
};

const getLocationConfig = (slug: string): LocationConfig => {
  return locationConfigs[slug as LocationConfigKey] || locationConfigs['cataratas-brasil-+-parque-das-aves'];
};

const config = getLocationConfig(pkg.slug);

const getLocationTypeText = (type: LocationType): string => {
  const typeMap: Record<LocationType, string> = {
    attraction: 'Atração',
    landmark: 'Marco',
    adventure: 'Aventura',
    shopping: 'Compras',
    port: 'Porto',
    waterfall: 'Cachoeira',
    church: 'Igreja',
    park: 'Parque',
    city: 'Centro',
    entertainment: 'Entretenimento'
  };
  return typeMap[type] || 'Atração';
};

const getMapCenter = () => {
  if (locations.length === 0) {
    return { lat: -25.5469, lng: -54.5882 };
  }
  
  const avgLat = locations.reduce((sum, point) => sum + point.lat, 0) / locations.length;
  const avgLng = locations.reduce((sum, point) => sum + point.lng, 0) / locations.length;
  
  return { lat: avgLat, lng: avgLng };
};

const mapCenter = getMapCenter();

// Traduções locais para fallback
const getMapTitle = (lang: string): string => {
  const titles: Record<string, string> = {
    pt: 'Localização dos Pontos',
    en: 'Location Points',
    es: 'Puntos de Ubicación'
  };
  return titles[lang] || titles.pt;
};

const getMapSubtitle = (lang: string): string => {
  const subtitles: Record<string, string> = {
    pt: 'Clique nos cards ao lado para navegar no mapa',
    en: 'Click on the cards to navigate the map',
    es: 'Haz clic en las tarjetas para navegar por el mapa'
  };
  return subtitles[lang] || subtitles.pt;
};

const getContactInfo = (lang: string): string => {
  const contactTexts: Record<string, string> = {
    pt: 'Entre em contato para mais informações',
    en: 'Contact us for more information',
    es: 'Contáctanos para más información'
  };
  return contactTexts[lang] || contactTexts.pt;
};

// Funções para traduzir títulos e subtítulos das seções
const getLocationSectionTitle = (lang: string, slug: string): string => {
  const titles: Record<string, Record<string, string>> = {
    'cataratas-brasil-+-parque-das-aves': {
      pt: 'Maravilhas Naturais',
      en: 'Natural Wonders',
      es: 'Maravillas Naturales'
    },
    'cataratas-argentina-+-city-tour-argentina': {
      pt: 'Experiência Argentina',
      en: 'Argentine Experience',
      es: 'Experiencia Argentina'
    },
    'cassino-argentina': {
      pt: 'Cassino City Center',
      en: 'City Center Casino',
      es: 'Casino City Center'
    },
    'macuco-safari': {
      pt: 'Adrenalina Pura',
      en: 'Pure Adrenaline',
      es: 'Adrenalina Pura'
    },
    'compras-paraguai': {
      pt: 'Compras & Descobertas',
      en: 'Shopping & Discoveries',
      es: 'Compras y Descubrimientos'
    },
    'city-tour-argentina': {
      pt: 'Passeio em Puerto Iguazú',
      en: 'Puerto Iguazú Tour',
      es: 'Tour por Puerto Iguazú'
    },
    'kattamaramII': {
      pt: 'Romance nas Águas',
      en: 'Romance on the Waters',
      es: 'Romance en las Aguas'
    },
    'city-tour-paraguai': {
      pt: 'Cultura Paraguaia',
      en: 'Paraguayan Culture',
      es: 'Cultura Paraguaya'
    },
    'city-tour-foz': {
      pt: 'Orgulho Brasileiro',
      en: 'Brazilian Pride',
      es: 'Orgullo Brasileño'
    }
  };
  return titles[slug]?.[lang] || titles[slug]?.pt || config.sectionTitle;
};

const getLocationSectionSubtitle = (lang: string, slug: string): string => {
  const subtitles: Record<string, Record<string, string>> = {
    'cataratas-brasil-+-parque-das-aves': {
      pt: 'Descubra a força da natureza em cada passo',
      en: 'Discover the power of nature at every step',
      es: 'Descubre el poder de la naturaleza en cada paso'
    },
    'cataratas-argentina-+-city-tour-argentina': {
      pt: 'Viva a paixão e cultura argentina',
      en: 'Experience the passion and culture of Argentina',
      es: 'Vive la pasión y cultura argentina'
    },
    'cassino-argentina': {
      pt: 'Jogos, bar completo e prêmios na moeda de sua escolha',
      en: 'Games, full bar and prizes in your currency',
      es: 'Juegos, bar completo y premios en tu moneda'
    },
    'macuco-safari': {
      pt: 'Para os amantes de aventura e emoção',
      en: 'For adventure and thrill seekers',
      es: 'Para los amantes de la aventura y la emoción'
    },
    'compras-paraguai': {
      pt: 'O melhor do comércio paraguaio',
      en: 'The best of Paraguayan commerce',
      es: 'Lo mejor del comercio paraguayo'
    },
    'city-tour-argentina': {
      pt: 'Conheça os principais pontos turísticos da cidade',
      en: 'Discover the main tourist attractions of the city',
      es: 'Conoce los principales puntos turísticos de la ciudad'
    },
    'kattamaramII': {
      pt: 'Um pôr do sol inesquecível',
      en: 'An unforgettable sunset',
      es: 'Un atardecer inolvidable'
    },
    'city-tour-paraguai': {
      pt: 'Tradições e belezas naturais',
      en: 'Traditions and natural beauty',
      es: 'Tradiciones y bellezas naturales'
    },
    'city-tour-foz': {
      pt: 'O melhor de Foz do Iguaçu',
      en: 'The best of Foz do Iguaçu',
      es: 'Lo mejor de Foz do Iguaçu'
    }
  };
  return subtitles[slug]?.[lang] || subtitles[slug]?.pt || config.sectionSubtitle;
};

const allTranslations = {
  pt: {
    content: packagesContent[pkg.slug as keyof typeof packagesContent]?.pt || content,
    mapTitle: getMapTitle('pt'),
    mapSubtitle: getMapSubtitle('pt'),
    contactInfo: getContactInfo('pt'),
    sectionTitle: config.sectionTitle,
    sectionSubtitle: config.sectionSubtitle,
    locations: locations.map((_, index) => {
      const translated = mapLocationsTranslations[pkg.slug as keyof typeof mapLocationsTranslations]?.locations[index];
      return translated ? { name: translated.name.pt, description: translated.description.pt } : null;
    }).filter(Boolean)
  },
  en: {
    content: packagesContent[pkg.slug as keyof typeof packagesContent]?.en || content,
    mapTitle: getMapTitle('en'),
    mapSubtitle: getMapSubtitle('en'),
    contactInfo: getContactInfo('en'),
    sectionTitle: getLocationSectionTitle('en', pkg.slug),
    sectionSubtitle: getLocationSectionSubtitle('en', pkg.slug),
    locations: locations.map((_, index) => {
      const translated = mapLocationsTranslations[pkg.slug as keyof typeof mapLocationsTranslations]?.locations[index];
      return translated ? { name: translated.name.en, description: translated.description.en } : null;
    }).filter(Boolean)
  },
  es: {
    content: packagesContent[pkg.slug as keyof typeof packagesContent]?.es || content,
    mapTitle: getMapTitle('es'),
    mapSubtitle: getMapSubtitle('es'),
    contactInfo: getContactInfo('es'),
    sectionTitle: getLocationSectionTitle('es', pkg.slug),
    sectionSubtitle: getLocationSectionSubtitle('es', pkg.slug),
    locations: locations.map((_, index) => {
      const translated = mapLocationsTranslations[pkg.slug as keyof typeof mapLocationsTranslations]?.locations[index];
      return translated ? { name: translated.name.es, description: translated.description.es } : null;
    }).filter(Boolean)
  }
};
---

<Layout title={`${content.title} - BNI Tour`}>
  
<!-- Language Selector -->
<div class="language-selector-wrapper">
  <div class="language-selector">
    <button 
      class="lang-btn"
      data-lang="pt"
      onclick="changeLanguage('pt')"
    >
      🇧🇷 PT
    </button>
    <button 
      class="lang-btn"
      data-lang="en"
      onclick="changeLanguage('en')"
    >
      🇺🇸 EN
    </button>
    <button 
      class="lang-btn"
      data-lang="es"
      onclick="changeLanguage('es')"
    >
      🇪🇸 ES
    </button>
  </div>
</div>

<section class="hero-section section-reveal relative h-[50vh] md:h-[55vh] lg:h-[60vh] overflow-hidden bg-gray-900">
  <div class="absolute inset-0 w-full h-full flex items-end justify-center">
    <img 
      src={pkg.image.src}
      alt={content.title}
      class="w-full h-auto object-bottom"
      style="object-position: center bottom;"
    />
  </div>
  <div class="absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-black/60"></div>
  
  <div class="relative z-10 h-full flex flex-col justify-end section-padding max-w-6xl mx-auto pb-8 md:pb-12">
    <a href="/#Packages" class="back-button mb-6 inline-flex items-center bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full text-white hover:bg-white/20 transition-all w-fit border border-white/20">
      <ArrowLeft size={18} class="mr-2" />
      <span class="font-medium" data-translate="packages.backToPackages">{t(lang, 'packages.backToPackages')}</span>
    </a>
    
    <div class={`tag-reveal inline-block px-6 py-3 rounded-full mb-6 w-fit card-tag card-tag-${pkg.tagColor} shadow-lg backdrop-blur-sm border border-white/20`}>
      <MapPin size={18} class="inline mr-2" />
      <span class="font-semibold">{pkg.location}</span>
    </div>
    
    <h1 class="title-reveal text-white mb-4 text-3xl md:text-4xl lg:text-5xl font-bold leading-tight" data-translate="title">
      {content.title}
    </h1>
    
    <p class="subtitle-reveal text-white text-base md:text-lg lg:text-xl max-w-2xl leading-relaxed" data-translate="description">
      {content.description}
    </p>
  </div>
</section>

  {locations.length > 0 && (
    <section class={`locations-section section-reveal bg-gradient-to-br ${config.bgGradient} section-padding`}>
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
          <h2 class="content-title text-3xl md:text-4xl font-bold text-gray-900 mb-4" data-translate="sectionTitle">
            {config.sectionTitle}
          </h2>
          <p class="content-subtitle text-lg text-gray-600 max-w-2xl mx-auto" data-translate="sectionSubtitle">
            {config.sectionSubtitle}
          </p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div class="space-y-6">
            {locations.map((location: Location, index: number) => {
  const IconComponent = getLocationIcon(location.type);
  return (
    <div 
      class={`location-card location-card-${config.cardStyle} bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer`}
      style={`animation-delay: ${index * 150}ms`}
      data-lat={location.lat}
      data-lng={location.lng}
      data-name={location.name}
      data-description={location.description}
      data-index={index}
    >
      <div class="flex items-start mb-4">
        <div 
          class="location-icon flex-shrink-0 w-12 h-12 rounded-xl flex items-center justify-center mr-4"
          style={`background: linear-gradient(135deg, ${currentColors.gradientFrom}, ${currentColors.gradientTo});`}
        >
          <IconComponent size={24} class="text-white" />
        </div>
        <div class="flex-1">
          <h3 class="font-bold text-gray-900 text-lg mb-1 leading-tight" data-translate={`location-name-${index}`}>
            {location.name}
          </h3>
          <span class="location-type text-sm px-2 py-1 rounded-full" style={`background-color: ${currentColors.primary}20; color: ${currentColors.primary};`}>
            {getLocationTypeText(location.type)}
          </span>
        </div>
      </div>
      <p class="text-gray-600 text-sm leading-relaxed" data-translate={`location-description-${index}`}>
        {location.description}
      </p>
    </div>
  );
})}
          </div>

<div class="map-container bg-white rounded-2xl shadow-xl overflow-hidden flex flex-col min-h-[24rem]"> 
  <div class="p-6 border-b border-gray-100 flex-shrink-0"> 
    <h3 class="text-xl font-bold text-gray-900 mb-2" data-translate="mapTitle">
      {getMapTitle(lang)}
    </h3>
    <p class="text-gray-600 text-sm" data-translate="mapSubtitle">
      {getMapSubtitle(lang)}
    </p>
  </div>
  <div id="leaflet-map" class="w-full flex-grow"></div>
</div>
        </div>
      </div>
    </section>
  )}

  <section class="content-section section-reveal bg-white section-padding">
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        
        <div class="lg:col-span-2">
          <div class="content-block mb-12">
            <h2 class="content-title text-gray-900 mb-6" data-translate="packages.fullDescription">
              {t(lang, 'packages.fullDescription')}
            </h2>
            <p class="content-text text-gray-700 leading-relaxed" data-translate="fullDescription">
              {content.fullDescription}
            </p>
          </div>

          <div class="content-block">
            <h3 class="content-title text-gray-900 mb-6" data-translate="packages.included">
              {t(lang, 'packages.included')}
            </h3>
            <ul class="space-y-4" data-translate="included">
              {content.included.map((item: string, index: number) => (
                <li class="included-item flex items-start" style={`animation-delay: ${index * 100}ms`}>
                  <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mr-3 mt-1" style={`background-color: ${currentColors.primary};`}>
                    <Check size={16} class="text-white" />
                  </div>
                  <span class="text-gray-700">{item}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>

        <div class="lg:col-span-1">
          <div class="sidebar-card sticky top-8 rounded-2xl p-8 shadow-2xl" style={`background-image: linear-gradient(to bottom right, ${currentColors.gradientFrom}, ${currentColors.gradientTo});`}>
            <div class="info-item mb-6">
              <div class="flex items-center text-white/80 mb-2">
                <Clock size={20} class="mr-2" />
                <span class="text-sm font-semibold uppercase tracking-wide" data-translate="packages.duration">{t(lang, 'packages.duration')}</span>
              </div>
              <p class="text-white text-xl font-bold" data-translate="duration">{content.duration}</p>
            </div>

            <div class="info-item mb-6">
              <div class="flex items-center text-white/80 mb-2">
                <MapPin size={20} class="mr-2" />
                <span class="text-sm font-semibold uppercase tracking-wide" data-translate="packages.location">{t(lang, 'packages.location')}</span>
              </div>
              <p class="text-white text-xl font-bold">{pkg.location}</p>
            </div>

            <div class="price-box bg-white/10 rounded-xl p-6 mb-6 backdrop-blur-sm">
              <p class="text-white/80 text-sm mb-2" data-translate="packages.price">{t(lang, 'packages.price')}</p>
              <p class="text-white text-3xl font-bold">{pkg.price}</p>
            </div>

            <a href="/" class="btn-cta w-full flex items-center justify-between text-white hover:shadow-lg transition-all px-6 py-3 rounded-xl font-semibold bg-gradient-to-r from-[#25D366] to-[#128C7E] hover:from-[#20B954] hover:to-[#0F6B5C]">
              <span data-translate="packages.bookNow">{t(lang, 'packages.bookNow')}</span>
              <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center flex-shrink-0 hover:bg-white/30 transition-colors">
                <MessageCircle size={16} class="text-white" />
              </div>
            </a>

            <p class="text-white/70 text-sm text-center mt-4" data-translate="contactInfo">
              {getContactInfo(lang)}
            </p>
          </div>
        </div>

      </div>
    </div>
  </section>

</Layout>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<style>
  .language-selector-wrapper {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
  }

  .language-selector {
    display: flex;
    gap: 8px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    padding: 8px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .lang-btn {
    padding: 8px 12px;
    border-radius: 8px;
    border: none;
    background: transparent;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
    color: #666;
  }

  .lang-btn:hover {
    background: rgba(59, 130, 246, 0.1);
    color: #3b82f6;
  }

  .lang-btn.active {
    background: #3b82f6;
    color: white;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }

  .card-tag-red { 
    background: linear-gradient(135deg, #ef4444, #dc2626);
    color: white;
    box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
  }
  .card-tag-green { 
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
  }
  .card-tag-blue { 
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
  }

.hero-section img {
  transition: transform 0.3s ease;
}

.hero-section:hover img {
  transform: scale(1.02);
}

  .location-card {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .location-card {
    opacity: 1;
    transform: translateY(0);
  }

 .location-card:hover {
  border-color: rgba(59, 130, 246, 0.3);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
  background-color: rgba(59, 130, 246, 0.02);
}

  .location-card-nature {
    border-left: 4px solid #10b981;
  }

  .location-card-cultural {
    border-left: 4px solid #3b82f6;
  }

  .location-card-adventure {
    border-left: 4px solid #f59e0b;
  }

  .location-card-shopping {
    border-left: 4px solid #8b5cf6;
  }

  .location-card-romantic {
    border-left: 4px solid #ec4899;
  }

  .location-card-urban {
    border-left: 4px solid #64748b;
  }

  .location-icon {
    opacity: 0;
    transform: scale(0.8);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .location-icon {
    opacity: 1;
    transform: scale(1);
  }

  .location-type {
    opacity: 0;
    transform: translateX(-10px);
    transition: opacity 0.6s ease 0.3s, transform 0.6s ease 0.3s;
  }

  .section-reveal-active .location-type {
    opacity: 1;
    transform: translateX(0);
  }

  .map-container {
    opacity: 0;
    transform: translateX(30px);
    transition: opacity 0.8s ease 0.4s, transform 0.8s ease 0.4s;
  }

  .section-reveal-active .map-container {
    opacity: 1;
    transform: translateX(0);
  }

  .leaflet-popup-content-wrapper {
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.15);
  }

  .leaflet-popup-content {
    margin: 16px;
    font-family: inherit;
  }

  .back-button {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease 0.3s, transform 0.6s ease 0.3s;
  }

  .section-reveal-active .back-button {
    opacity: 1;
    transform: translateX(0);
  }

  .back-button:hover {
    transform: translateX(-2px);
  }

  .tag-reveal {
    opacity: 0;
    transform: scale(0.9) translateY(10px);
    transition: opacity 0.6s ease 0.4s, transform 0.6s ease 0.4s;
  }

  .section-reveal-active .tag-reveal {
    opacity: 1;
    transform: scale(1) translateY(0);
  }

  .content-block {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .content-block {
    opacity: 1;
    transform: translateY(0);
  }

  .content-block:nth-child(1) {
    transition-delay: 0.2s;
  }

  .content-block:nth-child(2) {
    transition-delay: 0.4s;
  }

  .content-title {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .content-title {
    opacity: 1;
    transform: translateX(0);
  }

  .content-subtitle {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .content-subtitle {
    opacity: 1;
    transform: translateY(0);
  }

  .content-text {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 0.2s, transform 0.6s ease 0.2s;
  }

  .section-reveal-active .content-text {
    opacity: 1;
    transform: translateY(0);
  }

  .included-item {
    opacity: 0;
    transform: translateX(-20px);
    animation: slideInLeft 0.6s ease forwards;
    animation-play-state: paused;
  }

  .section-reveal-active .included-item {
    animation-play-state: running;
  }

  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .sidebar-card {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
    transition: opacity 0.8s ease 0.4s, transform 0.8s ease 0.4s;
  }

  .section-reveal-active .sidebar-card {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .info-item {
    opacity: 0;
    transform: translateX(-20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
  }

  .section-reveal-active .info-item {
    opacity: 1;
    transform: translateX(0);
  }

  .info-item:nth-child(1) {
    transition-delay: 0.6s;
  }

  .info-item:nth-child(2) {
    transition-delay: 0.7s;
  }

  .price-box {
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 0.6s ease 0.8s, transform 0.6s ease 0.8s;
  }

  .section-reveal-active .price-box {
    opacity: 1;
    transform: scale(1);
  }

  .sidebar-card .btn-cta {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease 1s, transform 0.6s ease 1s;
  }

  .section-reveal-active .sidebar-card .btn-cta {
    opacity: 1;
    transform: translateY(0);
  }

  .btn-cta:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255,255,255,0.2);
  }
</style>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script is:inline define:vars={{ locations, mapCenter, currentColors, lang: lang, allTranslations, t, pkgSlug: pkg.slug }}>
  document.addEventListener('DOMContentLoaded', function() {
    // Detectar idioma da URL
    const urlParams = new URLSearchParams(window.location.search);
    const currentLang = urlParams.get('lang') || 'pt';
    
    // Variável global para armazenar os markers
    let markers = [];
    
    // Função para atualizar conteúdo traduzido
    function updateTranslations(newLang) {
      const translations = allTranslations[newLang];
      if (!translations) return;
      
      // Atualizar elementos com data-translate
      document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        
        // Verificar se é uma tradução de location
        if (key.startsWith('location-name-')) {
          const index = parseInt(key.replace('location-name-', ''));
          if (translations.locations && translations.locations[index]) {
            element.textContent = translations.locations[index].name;
          }
          return;
        }
        
        if (key.startsWith('location-description-')) {
          const index = parseInt(key.replace('location-description-', ''));
          if (translations.locations && translations.locations[index]) {
            element.textContent = translations.locations[index].description;
          }
          return;
        }
        
        switch(key) {
          case 'title':
            element.textContent = translations.content.title;
            break;
          case 'description':
            element.textContent = translations.content.description;
            break;
          case 'fullDescription':
            element.textContent = translations.content.fullDescription;
            break;
          case 'duration':
            element.textContent = translations.content.duration;
            break;
          case 'mapTitle':
            element.textContent = translations.mapTitle;
            break;
          case 'mapSubtitle':
            element.textContent = translations.mapSubtitle;
            break;
          case 'contactInfo':
            element.textContent = translations.contactInfo;
            break;
          case 'sectionTitle':
            element.textContent = translations.sectionTitle;
            break;
          case 'sectionSubtitle':
            element.textContent = translations.sectionSubtitle;
            break;
          case 'packages.backToPackages':
            element.textContent = getTranslation(newLang, 'packages.backToPackages');
            break;
          case 'packages.fullDescription':
            element.textContent = getTranslation(newLang, 'packages.fullDescription');
            break;
          case 'packages.included':
            element.textContent = getTranslation(newLang, 'packages.included');
            break;
          case 'packages.duration':
            element.textContent = getTranslation(newLang, 'packages.duration');
            break;
          case 'packages.location':
            element.textContent = getTranslation(newLang, 'packages.location');
            break;
          case 'packages.price':
            element.textContent = getTranslation(newLang, 'packages.price');
            break;
          case 'packages.bookNow':
            element.textContent = getTranslation(newLang, 'packages.bookNow');
            break;
        }
      });
      
      // Atualizar popups do mapa
      updateMapPopups(newLang);
      
      // Atualizar lista de incluídos
      const includedList = document.querySelector('[data-translate="included"]');
      if (includedList && translations.content.included) {
        includedList.innerHTML = '';
        translations.content.included.forEach((item, index) => {
          const li = document.createElement('li');
          li.className = 'included-item flex items-start';
          li.style.animationDelay = `${index * 100}ms`;
          li.innerHTML = `
            <div class="flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center mr-3 mt-1" style="background-color: ${currentColors.primary};">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                <polyline points="20,6 9,17 4,12"></polyline>
              </svg>
            </div>
            <span class="text-gray-700">${item}</span>
          `;
          includedList.appendChild(li);
        });
      }
    }
    
    // Função para atualizar popups do mapa
    function updateMapPopups(newLang) {
      const translations = allTranslations[newLang];
      if (!translations || !translations.locations) return;
      
      markers.forEach((marker, index) => {
        if (translations.locations[index]) {
          const loc = translations.locations[index];
          marker.setPopupContent(`
            <div style="padding: 8px; max-width: 200px;">
              <h3 style="margin: 0 0 8px 0; color: ${currentColors.primary}; font-size: 16px; font-weight: bold;">
                ${loc.name}
              </h3>
              <p style="margin: 0; color: #666; font-size: 14px; line-height: 1.4;">
                ${loc.description}
              </p>
            </div>
          `);
        }
      });
    }
    
    // Função auxiliar para traduções
    function getTranslation(lang, key) {
      const translations = {
        pt: {
          'packages.backToPackages': 'Voltar aos Pacotes',
          'packages.fullDescription': 'Descrição Completa',
          'packages.included': 'O que está incluído',
          'packages.duration': 'Duração',
          'packages.location': 'Localização',
          'packages.price': 'Preço',
          'packages.bookNow': 'Reserve Agora'
        },
        en: {
          'packages.backToPackages': 'Back to Packages',
          'packages.fullDescription': 'Full Description',
          'packages.included': 'What\'s included',
          'packages.duration': 'Duration',
          'packages.location': 'Location',
          'packages.price': 'Price',
          'packages.bookNow': 'Book Now'
        },
        es: {
          'packages.backToPackages': 'Volver a Paquetes',
          'packages.fullDescription': 'Descripción Completa',
          'packages.included': 'Qué está incluido',
          'packages.duration': 'Duración',
          'packages.location': 'Ubicación',
          'packages.price': 'Precio',
          'packages.bookNow': 'Reservar Ahora'
        }
      };
      
      return translations[lang]?.[key] || translations.pt[key] || key;
    }
    
    // Atualizar botões de idioma
    function updateLanguageButtons(activeLang) {
      const langButtons = document.querySelectorAll('.lang-btn');
      langButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.lang === activeLang) {
          btn.classList.add('active');
        }
      });
    }
    
    // Inicializar com idioma atual
    updateLanguageButtons(currentLang);
    updateTranslations(currentLang);

    // Mapa Leaflet
    if (typeof L === 'undefined') {
      console.error('Leaflet não carregou');
      return;
    }

    const map = L.map('leaflet-map').setView([mapCenter.lat, mapCenter.lng], 12);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors',
      maxZoom: 19
    }).addTo(map);

    const createCustomIcon = (color) => {
      return L.divIcon({
        className: 'custom-marker',
        html: `<div style="
          width: 20px;
          height: 20px;
          background-color: ${color};
          border: 3px solid white;
          border-radius: 50%;
          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        "></div>`,
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      });
    };

    // Obter traduções iniciais
    const currentTranslations = allTranslations[currentLang];
    
    locations.forEach((location, index) => {
      const marker = L.marker([location.lat, location.lng], {
        icon: createCustomIcon(currentColors.primary)
      }).addTo(map);

      // Usar tradução se disponível
      const translatedName = currentTranslations.locations && currentTranslations.locations[index] 
        ? currentTranslations.locations[index].name 
        : location.name;
      const translatedDescription = currentTranslations.locations && currentTranslations.locations[index]
        ? currentTranslations.locations[index].description
        : location.description;

      marker.bindPopup(`
        <div style="padding: 8px; max-width: 200px;">
          <h3 style="margin: 0 0 8px 0; color: ${currentColors.primary}; font-size: 16px; font-weight: bold;">
            ${translatedName}
          </h3>
          <p style="margin: 0; color: #666; font-size: 14px; line-height: 1.4;">
            ${translatedDescription}
          </p>
        </div>
      `);

      markers.push(marker);
    });

    const locationCards = document.querySelectorAll('.location-card');
    locationCards.forEach((card, index) => {
      card.addEventListener('click', () => {
        const lat = parseFloat(card.dataset.lat);
        const lng = parseFloat(card.dataset.lng);
        
        map.setView([lat, lng], 15);
        
        if (markers[index]) {
          markers[index].openPopup();
        }
        
        card.style.transform = 'scale(1.02)';
        card.style.boxShadow = '0 10px 25px rgba(0,0,0,0.15)';
        
        setTimeout(() => {
          card.style.transform = '';
          card.style.boxShadow = '';
        }, 200);
      });
    });

    if (locations.length > 1) {
      const group = new L.featureGroup(markers);
      map.fitBounds(group.getBounds().pad(0.1));
    }

    // Função global para trocar idioma
    window.changeLanguage = function(newLang) {
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set('lang', newLang);
      
      // Atualizar URL sem recarregar
      window.history.pushState({}, '', currentUrl.toString());
      
      // Atualizar conteúdo
      updateLanguageButtons(newLang);
      updateTranslations(newLang);
    };
  });
</script>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    var observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    var sectionObserver = new IntersectionObserver(function(entries) {
      for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        if (entry.isIntersecting) {
          entry.target.classList.add('section-reveal-active');
          sectionObserver.unobserve(entry.target);
        }
      }
    }, observerOptions);

    var revealSections = document.querySelectorAll('.section-reveal');
    for (var i = 0; i < revealSections.length; i++) {
      sectionObserver.observe(revealSections[i]);
    }
  });
</script>
